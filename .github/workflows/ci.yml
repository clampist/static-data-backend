name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  # 应用配置
  SPRING_PROFILES_ACTIVE: ci
  APP_VERSION: ${{ github.sha }}
  
  # 数据库配置 - 使用GitHub Secrets
  SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/static_data_platform_test
  SPRING_DATASOURCE_USERNAME: sdp_user
  SPRING_DATASOURCE_PASSWORD: aP5WeC8GNHzQXfvNyEIrDnCkkmi4Jc8g
  
  # JWT配置 - 使用GitHub Secrets
  APP_JWT_SECRET: F9uIqqdZ9Hxt9zNKPBrcidenuEFKdQs8CKgjkBHuN/SLIEE38w3jfO45I8wF+zfwVnRiRuFQQorvxcGLg/r5RA==
  APP_JWT_EXPIRATION: 86400000
  
  # Redis配置
  SPRING_DATA_REDIS_HOST: localhost
  SPRING_DATA_REDIS_PORT: 6379
  
  # CORS配置
  CORS_ALLOWED_ORIGINS: http://localhost:3000,http://localhost:5173

jobs:
  test:
    name: UT Coverage Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: static_data_platform_test
          POSTGRES_USER: sdp_user
          POSTGRES_PASSWORD: aP5WeC8GNHzQXfvNyEIrDnCkkmi4Jc8g
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Initialize test database
      run: |
        # Wait for PostgreSQL to be ready
        until pg_isready -h localhost -p 5432 -U sdp_user; do
          echo "Waiting for PostgreSQL..."
          sleep 2
        done
        
        # Create extensions and test database
        PGPASSWORD=aP5WeC8GNHzQXfvNyEIrDnCkkmi4Jc8g psql -h localhost -p 5432 -U sdp_user -d static_data_platform_test -c "
        CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\";
        CREATE EXTENSION IF NOT EXISTS \"pg_trgm\";
        "

    - name: Run tests using ut-scripts
      run: bash -x ./ut-scripts/run-all-tests.sh
      env:
        # 测试环境特定配置
        SPRING_PROFILES_ACTIVE: test
        # 覆盖默认的数据库URL为测试容器
        SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/static_data_platform_test
        SPRING_DATASOURCE_USERNAME: sdp_user
        SPRING_DATASOURCE_PASSWORD: aP5WeC8GNHzQXfvNyEIrDnCkkmi4Jc8g
        SPRING_DATA_REDIS_HOST: localhost
        SPRING_DATA_REDIS_PORT: 6379
        APP_JWT_SECRET: F9uIqqdZ9Hxt9zNKPBrcidenuEFKdQs8CKgjkBHuN/SLIEE38w3jfO45I8wF+zfwVnRiRuFQQorvxcGLg/r5RA==
        APP_JWT_EXPIRATION: 86400000
        CORS_ALLOWED_ORIGINS: http://localhost:3000,http://localhost:5173

    - name: Package JaCoCo dependencies
      run: ./ut-scripts/package-jacococli-dependencies.sh

    - name: Upload JaCoCo packages
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: jacoco-packages
        path: ./ut-scripts/packages/
        retention-days: 30

    - name: Upload UT coverage reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: ut-coverage-reports
        path: ./ut-scripts/coverage-reports/jacoco/
        retention-days: 30

  api-test:
    name: API Coverage Tests
    runs-on: ubuntu-latest
    needs: test
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: static_data_platform_test
          POSTGRES_USER: sdp_user
          POSTGRES_PASSWORD: aP5WeC8GNHzQXfvNyEIrDnCkkmi4Jc8g
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven

    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Initialize test database
      run: |
        # Wait for PostgreSQL to be ready
        until pg_isready -h localhost -p 5432 -U sdp_user; do
          echo "Waiting for PostgreSQL..."
          sleep 2
        done
        
        # Create extensions and test database
        PGPASSWORD=aP5WeC8GNHzQXfvNyEIrDnCkkmi4Jc8g psql -h localhost -p 5432 -U sdp_user -d static_data_platform_test -c "
        CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\";
        CREATE EXTENSION IF NOT EXISTS \"pg_trgm\";
        "

    - name: Build application for API tests
      run: ./mvnw clean package -DskipTests
      env:
        SPRING_PROFILES_ACTIVE: test
        SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/static_data_platform_test
        SPRING_DATASOURCE_USERNAME: sdp_user
        SPRING_DATASOURCE_PASSWORD: aP5WeC8GNHzQXfvNyEIrDnCkkmi4Jc8g
        SPRING_DATA_REDIS_HOST: localhost
        SPRING_DATA_REDIS_PORT: 6379
        APP_JWT_SECRET: F9uIqqdZ9Hxt9zNKPBrcidenuEFKdQs8CKgjkBHuN/SLIEE38w3jfO45I8wF+zfwVnRiRuFQQorvxcGLg/r5RA==
        APP_JWT_EXPIRATION: 86400000
        CORS_ALLOWED_ORIGINS: http://localhost:3000,http://localhost:5173

    - name: Initialize database schema and test data
      run: |
        # Start application in background to create database schema
        echo "Starting application to create database schema..."
        nohup java -jar target/*.jar --spring.profiles.active=test > app.log 2>&1 &
        APP_PID=$!
        
        # Wait for application to start and create schema
        echo "Waiting for application to start..."
        for i in {1..60}; do
          if curl -s http://localhost:8080/api/actuator/health > /dev/null 2>&1; then
            echo "Application started successfully"
            break
          fi
          echo "Waiting for application... ($i/60)"
          sleep 2
        done
        
        # Wait additional time for JPA to create all tables
        echo "Waiting for JPA to create database tables..."
        sleep 15
        
        # Verify tables exist before stopping application
        echo "Verifying database tables exist..."
        for i in {1..15}; do
          if PGPASSWORD=aP5WeC8GNHzQXfvNyEIrDnCkkmi4Jc8g psql -h localhost -p 5432 -U sdp_user -d static_data_platform_test -c "SELECT 1 FROM organization_nodes LIMIT 1;" > /dev/null 2>&1; then
            echo "Database tables created successfully"
            break
          fi
          echo "Waiting for tables to be created... ($i/15)"
          sleep 3
        done
        
        # Additional wait to ensure JPA has completed all operations
        echo "Ensuring JPA has completed all database operations..."
        sleep 5
        
        # Stop the application gracefully
        echo "Stopping application gracefully..."
        kill -TERM $APP_PID 2>/dev/null || true
        sleep 5
        
        # Force kill if still running
        if kill -0 $APP_PID 2>/dev/null; then
          echo "Force killing application..."
          kill -KILL $APP_PID 2>/dev/null || true
        fi
        sleep 2
        
        # Insert test data
        echo "Inserting test data..."
        
        # Final check that tables exist
        if ! PGPASSWORD=aP5WeC8GNHzQXfvNyEIrDnCkkmi4Jc8g psql -h localhost -p 5432 -U sdp_user -d static_data_platform_test -c "SELECT 1 FROM organization_nodes LIMIT 1;" > /dev/null 2>&1; then
          echo "ERROR: organization_nodes table does not exist. Application may not have created tables properly."
          echo "Application log:"
          cat app.log || true
          exit 1
        fi
        
        PGPASSWORD=aP5WeC8GNHzQXfvNyEIrDnCkkmi4Jc8g psql -h localhost -p 5432 -U sdp_user -d static_data_platform_test -c "
        -- Insert basic organization structure for API tests
        INSERT INTO organization_nodes (id, name, description, type, parent_id, sort_order, created_at, updated_at, created_by, updated_by) VALUES
        (1, 'Headquarters', 'Main company headquarters', 'DEPARTMENT', NULL, 1, NOW(), NOW(), 'system', 'system'),
        (2, 'Engineering Department', 'Software development and technical operations', 'DEPARTMENT', 1, 1, NOW(), NOW(), 'system', 'system'),
        (3, 'Backend Team', 'Backend services and API development', 'TEAM', 2, 1, NOW(), NOW(), 'system', 'system'),
        (4, 'API Development', 'RESTful APIs and microservices', 'BUSINESS_DIRECTION', 3, 1, NOW(), NOW(), 'system', 'system'),
        (5, 'Data Management API', 'Data file and content management', 'MODULE', 4, 1, NOW(), NOW(), 'system', 'system'),
        (6, 'User Management API', 'User authentication and profile management', 'MODULE', 4, 2, NOW(), NOW(), 'system', 'system'),
        (7, 'Test Module', 'Test module for API testing', 'MODULE', 4, 3, NOW(), NOW(), 'system', 'system')
        ON CONFLICT (id) DO NOTHING;
        
        -- Create test user for API tests
        INSERT INTO users (id, username, email, password, role, enabled, created_at, updated_at, created_by, updated_by) VALUES
        (1, 'testuser', 'testuser@test.com', '\$2a\$10\$N.zmdr9k7uOCQb376NoUnuTJ8iAt6Z5EHsM8lE9lBOsl7iKTVEFDi', 'USER', true, NOW(), NOW(), 'system', 'system')
        ON CONFLICT (username) DO NOTHING;
        
        -- Update sequences
        SELECT setval('organization_nodes_id_seq', (SELECT MAX(id) FROM organization_nodes));
        SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
        "
      env:
        SPRING_PROFILES_ACTIVE: test
        SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/static_data_platform_test
        SPRING_DATASOURCE_USERNAME: sdp_user
        SPRING_DATASOURCE_PASSWORD: aP5WeC8GNHzQXfvNyEIrDnCkkmi4Jc8g
        SPRING_DATA_REDIS_HOST: localhost
        SPRING_DATA_REDIS_PORT: 6379
        APP_JWT_SECRET: F9uIqqdZ9Hxt9zNKPBrcidenuEFKdQs8CKgjkBHuN/SLIEE38w3jfO45I8wF+zfwVnRiRuFQQorvxcGLg/r5RA==
        APP_JWT_EXPIRATION: 86400000
        CORS_ALLOWED_ORIGINS: http://localhost:3000,http://localhost:5173

    - name: Setup JaCoCo agent for API tests
      run: bash -x ./api-tests/setup-jacoco-agent.sh

    - name: Run API coverage tests
      run: bash -x ./api-tests/api-coverage-test.sh
      env:
        SPRING_PROFILES_ACTIVE: test
        SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/static_data_platform_test
        SPRING_DATASOURCE_USERNAME: sdp_user
        SPRING_DATASOURCE_PASSWORD: aP5WeC8GNHzQXfvNyEIrDnCkkmi4Jc8g
        SPRING_DATA_REDIS_HOST: localhost
        SPRING_DATA_REDIS_PORT: 6379
        APP_JWT_SECRET: F9uIqqdZ9Hxt9zNKPBrcidenuEFKdQs8CKgjkBHuN/SLIEE38w3jfO45I8wF+zfwVnRiRuFQQorvxcGLg/r5RA==
        APP_JWT_EXPIRATION: 86400000
        CORS_ALLOWED_ORIGINS: http://localhost:3000,http://localhost:5173

    - name: Download JaCoCo packages from test job
      uses: actions/download-artifact@v4
      with:
        name: jacoco-packages
        path: ./ut-scripts/packages/

    - name: Copy JaCoCo packages to api-tests/cov
      run: |
        # Create cov directory
        mkdir -p ./api-tests/cov
        
        # Copy compiled artifacts tar.gz file
        echo "Copying compiled artifacts..."
        find ./ut-scripts/packages/ -name "compiled-artifacts_*.tar.gz" -exec cp {} ./api-tests/cov/ \;
        
        # Copy source code tar.gz file
        echo "Copying source code..."
        find ./ut-scripts/packages/ -name "source-code_*.tar.gz" -exec cp {} ./api-tests/cov/ \;
        
        # List copied files
        echo "Copied files:"
        ls -la ./api-tests/cov/

    - name: Generate API coverage report
      run: bash -x ./api-tests/generate-report-standalone.sh

    - name: Upload API test artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: api-test-artifacts
        path: |
          api-tests/cov/reports/latest/
        retention-days: 30

  sonar:
    name: SonarQube Analysis
    runs-on: ubuntu-latest
    needs: [test, api-test]
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: static_data_platform_test
          POSTGRES_USER: sdp_user
          POSTGRES_PASSWORD: aP5WeC8GNHzQXfvNyEIrDnCkkmi4Jc8g
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Shallow clones should be disabled for better analysis

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Initialize test database
      run: |
        # Wait for PostgreSQL to be ready
        until pg_isready -h localhost -p 5432 -U sdp_user; do
          echo "Waiting for PostgreSQL..."
          sleep 2
        done
        
        # Create extensions and test database
        PGPASSWORD=aP5WeC8GNHzQXfvNyEIrDnCkkmi4Jc8g psql -h localhost -p 5432 -U sdp_user -d static_data_platform_test -c "
        CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\";
        CREATE EXTENSION IF NOT EXISTS \"pg_trgm\";
        "

    - name: Build and test with coverage
      run: ./mvnw clean verify
      env:
        SPRING_PROFILES_ACTIVE: test
        SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/static_data_platform_test
        SPRING_DATASOURCE_USERNAME: sdp_user
        SPRING_DATASOURCE_PASSWORD: aP5WeC8GNHzQXfvNyEIrDnCkkmi4Jc8g
        SPRING_DATA_REDIS_HOST: localhost
        SPRING_DATA_REDIS_PORT: 6379
        APP_JWT_SECRET: F9uIqqdZ9Hxt9zNKPBrcidenuEFKdQs8CKgjkBHuN/SLIEE38w3jfO45I8wF+zfwVnRiRuFQQorvxcGLg/r5RA==
        APP_JWT_EXPIRATION: 86400000
        CORS_ALLOWED_ORIGINS: http://localhost:3000,http://localhost:5173

    - name: Download UT coverage reports from test job
      uses: actions/download-artifact@v4
      with:
        name: ut-coverage-reports
        path: ./target/site/jacoco/

    - name: Download API test artifacts from api-test job
      uses: actions/download-artifact@v4
      with:
        name: api-test-artifacts
        path: ./target/failsafe-reports/

    - name: Cache SonarQube packages
      uses: actions/cache@v4
      with:
        path: ~/.sonar/cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar

    - name: SonarQube Scan
      run: ./mvnw -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=clampist_static-data-backend
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  output:
    needs: [test, api-test, sonar]
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Create output directory structure
      run: |
        # Create main output directory
        mkdir -p ./output
        cd ./output
        
        # Create subdirectories
        mkdir -p ./src
        mkdir -p ./target
        mkdir -p ./ut/latest
        mkdir -p ./at/latest
        mkdir -p ./temp-packages
        
        echo "Created output directory structure:"
        tree -a -L 3 || find . -type d | sort

    - name: Download UT coverage reports from test job
      uses: actions/download-artifact@v4
      with:
        name: ut-coverage-reports
        path: ./output/ut/latest/

    - name: Download JaCoCo packages from test job
      uses: actions/download-artifact@v4
      with:
        name: jacoco-packages
        path: ./output/temp-packages/

    - name: Extract JaCoCo packages to output/src and output/target
      run: |
        cd ./output
        
        # Extract compiled artifacts to target/classes
        echo "Extracting compiled artifacts to target/classes..."
        find ./temp-packages/ -name "compiled-artifacts_*.tar.gz" -exec tar -xzf {} -C ./target \;
        
        # Extract source code to src/main/java
        echo "Extracting source code to src/main/java..."
        find ./temp-packages/ -name "source-code_*.tar.gz" -exec tar -xzf {} -C ./src \;
        
        # List extracted files (avoid broken pipe)
        echo "Extracted source files:"
        find ./src -type f | head -5 || true
        echo "Extracted target files:"
        find ./target -type f | head -5 || true
        
        # Show directory structure
        echo "Directory structure:"
        ls -la ./src/ || true
        ls -la ./target/ || true

    - name: Download API test artifacts from api-test job
      uses: actions/download-artifact@v4
      with:
        name: api-test-artifacts
        path: ./output/at/latest/

    - name: Show final output directory structure
      run: |
        echo "=== Final Output Directory Structure ==="
        echo ""
        echo "📁 Output root directory contents:"
        ls -la ./output/
        echo ""
        echo "📁 output/src/ directory structure:"
        find ./output/src -type d | sort
        echo ""
        echo "📁 output/target/ directory structure:"
        find ./output/target -type d | sort
        echo ""
        echo "📁 output/ut/latest/ directory contents:"
        ls -la ./output/ut/latest/ || echo "ut/latest/ not found"
        echo ""
        echo "📁 output/at/latest/ directory contents:"
        ls -la ./output/at/latest/ || echo "at/latest/ not found"
        echo ""
        echo "📊 File counts:"
        echo "  - Source files: $(find ./output/src -type f | wc -l)"
        echo "  - Target files: $(find ./output/target -type f | wc -l)"
        echo "  - UT report files: $(find ./output/ut -type f 2>/dev/null | wc -l || echo 0)"
        echo "  - AT report files: $(find ./output/at -type f 2>/dev/null | wc -l || echo 0)"
        echo ""
        echo "📁 Complete output directory tree:"
        tree ./output -a -L 4 || find ./output -type d | sort


