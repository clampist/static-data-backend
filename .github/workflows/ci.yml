name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  # 应用配置
  SPRING_PROFILES_ACTIVE: ci
  APP_VERSION: ${{ github.sha }}
  
  # 数据库配置 - 使用GitHub Secrets
  SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/static_data_platform_test
  SPRING_DATASOURCE_USERNAME: sdp_user
  SPRING_DATASOURCE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
  
  # JWT配置 - 使用GitHub Secrets
  APP_JWT_SECRET: ${{ secrets.JWT_SECRET }}
  APP_JWT_EXPIRATION: 86400000
  
  # Redis配置
  SPRING_DATA_REDIS_HOST: localhost
  SPRING_DATA_REDIS_PORT: 6379
  
  # CORS配置
  CORS_ALLOWED_ORIGINS: http://localhost:3000,http://localhost:5173

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: static_data_platform_test
          POSTGRES_USER: sdp_user
          POSTGRES_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Initialize test database
      run: |
        # Wait for PostgreSQL to be ready
        until pg_isready -h localhost -p 5432 -U sdp_user; do
          echo "Waiting for PostgreSQL..."
          sleep 2
        done
        
        # Create extensions and test database
        PGPASSWORD=${{ secrets.DATABASE_PASSWORD }} psql -h localhost -p 5432 -U sdp_user -d static_data_platform_test -c "
        CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\";
        CREATE EXTENSION IF NOT EXISTS \"pg_trgm\";
        "

    - name: Run tests
      run: ./mvnw test
      env:
        # 测试环境特定配置
        SPRING_PROFILES_ACTIVE: test
        # 覆盖默认的数据库URL为测试容器
        SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/static_data_platform_test

    - name: Generate test report
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: Maven Tests
        path: target/surefire-reports/*.xml
        reporter: java-junit

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./target/site/jacoco/jacoco.xml
        flags: unittests
        name: codecov-umbrella

  build:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Build with Maven
      run: ./mvnw clean package -DskipTests
      env:
        SPRING_PROFILES_ACTIVE: ci

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: jar-artifact
        path: target/*.jar

  security-scan:
    needs: build
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  deploy:
    needs: [test, build, security-scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: jar-artifact
        path: target/

    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        echo "Using database: ${{ secrets.PROD_DATABASE_URL }}"
        echo "Using JWT secret: ${{ secrets.PROD_JWT_SECRET }}"
        # 这里添加你的部署脚本
        # 例如: docker build, kubectl apply, 等
